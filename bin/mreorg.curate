#! /usr/bin/python
import argparse
import sys,os
from django.core.management import execute_manager
from django.core.management import execute_from_command_line
import mreorg
import mreorg.curator.backend_sim.simmgr_backend



if 'MREORG_CURATION_REENTRYFLAG' in os.environ:
    execute_from_command_line(sys.argv)


def cmd_runserver(params):
    os.environ['DJANGO_SETTINGS_MODULE']='mreorg.curator.settings'
    os.environ['MREORG_CURATION_REENTRYFLAG'] = 'TRUE'
    sys.argv = [ __file__,  'runserver','%d'%params.port] 
    execute_from_command_line(sys.argv)

def cmd_runbackend(params):
    mreorg.curator.backend_sim.simmgr_backend.run_backend()
    

def cmd_builddb(params):
    print 'Rebuild-db'

def cmd_backup(*args, **kwargs):
    print 'backup', args, kwargs



import argparse
description = "mreorg.curate is tool for managing large numbers of simulations"
parser = argparse.ArgumentParser(description=description)
subparsers = parser.add_subparsers(help='sub-command help')

# Global options valid to all 
#parser.add_argument('integers', metavar='N', type=int, nargs='+', help='an integer for the accumulator')
#parser.add_argument('--sum', dest='accumulate', action='store_const', const=sum, default=max, help='sum the integers (default: find the max)')


parser_runserver = subparsers.add_parser('runserver', help='run the django backend' )
parser_runserver.add_argument('-p', '--port', type=int, default=8000, help='the port to run django on')
parser_runserver.set_defaults(func=cmd_runserver)


parser_runbackend = subparsers.add_parser('runbackend', help="launch a 'backend-worker")
#parser_runbackend.add_argument('--baz', choices='XYZ', help='baz help')
parser_runbackend.set_defaults(func=cmd_runbackend)

parser_builddb = subparsers.add_parser('builddb', help='create the database')
parser_builddb.add_argument('-r', '--rebuild',  help='delete an existing database before starting')
parser_builddb.set_defaults(func=cmd_builddb)

parser_backup = subparsers.add_parser('backup', help='backup the existing database')
parser_backup.set_defaults(func=cmd_backup)


args = parser.parse_args()
args.func(args)
#print args.accumulate(args.integers)
